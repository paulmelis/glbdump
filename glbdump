#!/usr/bin/env python
# glbdump - Dump the contents of a Binary glTF (.glb) file
#
# Copyright 2021-2023, Paul E.C. Melis
# 
# Permission is hereby granted, free of charge, to any person obtaining a 
# copy of this software and associated documentation files (the "Software"), 
# to deal in the Software without restriction, including without limitation 
# the rights to use, copy, modify, merge, publish, distribute, sublicense, 
# and/or sell copies of the Software, and to permit persons to whom the 
# Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included 
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
# THE SOFTWARE.

import sys, array, json, os
from struct import unpack

if len(sys.argv) == 1 or '-h' in sys.argv:
    print('Usage: %s [options] file.glb' % sys.argv[0])
    print()
    print('Options:')
    print('  -a  Dump accessor values')
    print('  -i  Dump images to files')
    print('  -j  Dump JSON chunk (formatted)')
    print('  -l  Load images and show their properties')
    print('  -p  Dump per-primitive information')
    print()
    sys.exit(-1)

glbfile = sys.argv[-1]
if not os.path.isfile(glbfile):
    print('Error: %s does not appear to be a file!' % glbfile)
    sys.exit(-1)
        
options = sys.argv[1:-1]

dump_accessor_values = False
dump_images = False
dump_json_chunk = False
dump_primitive_information = False
read_binary_chunk = False
show_image_properties = False

if '-a' in options:
    dump_accessor_values = True
    read_binary_chunk = True
if '-i' in options:
    dump_images = True
    read_binary_chunk = True
if '-j' in options:
    dump_json_chunk = True
if '-l' in options:
    show_image_properties = True
    read_binary_chunk = True
if '-p' in options:
    dump_primitive_information = True
    
if show_image_properties:
    from io import BytesIO
    try:
        from PIL import Image
    except ImportError:
        print('The -l option needs the PIL(LOW) package, which could not be loaded!')
        sys.exit(-1)
        
# Read file

stats = os.stat(glbfile)
f = open(glbfile, 'rb')

if f.read(4) != b'glTF':
    print("This doesn't appear to be a Binary glTF file!")
    sys.exit(-1)
    
container_version = unpack('<I', f.read(4))[0]
if container_version != 2:
    print("Don't know how to handle container version %d, only know 2" % container_version)
    sys.exit(-1)
    
length = unpack('<I', f.read(4))[0]
print('Total file size %s bytes' % format(length, ',d'))
if stats.st_size != length:
    print('Warning: file size in .glb does not match actual file size (%s)!' % \
        format(stats.st_size, ',d'))

# Process JSON chunk
chunk_length = unpack('<I', f.read(4))[0]
chunk_type = f.read(4)
if chunk_type != b'JSON':
    print('First chunk is not of type JSON!')
    sys.exit(-1)

print()
print('JSON chunk (%s bytes)' % format(chunk_length, ',d'))

js = f.read(chunk_length).decode('utf8')
j = json.loads(js)

if dump_json_chunk:
    # And back to JSON text :)
    print(json.dumps(j, indent=4, sort_keys=True))

if 'buffers' not in j:
    print('No buffers defined in file, exiting!')
    sys.exit(-1)
    
buffers = j['buffers']
bufferviews = j['bufferViews']
accessors = j['accessors']

# Load buffer data, if needed

buffer0data = None
accessor_uses = {}

if read_binary_chunk:
    
    # Load binary buffer chunk
    chunk_length = unpack('<I', f.read(4))[0]
    chunk_type = f.read(4)
    if chunk_type != b'BIN\x00':
        print('Second chunk is not of type BIN!')
        sys.exit(-1)
            
    print('BIN chunk (%s bytes)' % format(chunk_length, ',d'))
    
    assert len(buffers) == 1
    assert 'uri' not in buffers[0]
    
    # BIN chunk might be up to 3 bytes longer than buffer, to satisfy GLB padding
    bindatasize = min(buffers[0]['byteLength'], chunk_length)
    buffer0data = memoryview(f.read(bindatasize))

f.close()

# Dump!

print()
print('Asset Version   : %s' % j['asset']['version'])
print('      Generator : "%s"' % j['asset']['generator'])
if j['asset']['version'] != '2.0':
    print('Warning: not sure if we understand version != 2.0, but continuing anyway')
    
if 'extensionsRequired' in j:    
    er = ', '.join(j['extensionsRequired'])
    eu = ', '.join(j['extensionsUsed'])
    print()
    print('Extensions (used)     :', eu)
    print('           (required) :', er)
    
print()
print('Elements:')
print('%4d nodes' % len(j['nodes']))
if 'cameras' in j:
    print('%4d cameras' % len(j['cameras']))
if 'images' in j:
    totalimsize = 0
    for i in j['images']:
        if 'uri' in i:
            print('Skipping external image ("%s")' % i['uri'])
            continue
        totalimsize += bufferviews[i['bufferView']]['byteLength']
    print('%4d images     (%s bytes)' % (len(j['images']), format(totalimsize, ',d')))
if 'materials' in j:
    print('%4d materials' % len(j['materials']))
if 'meshes' in j:    
    print('%4d meshes' % len(j['meshes']))
if 'textures' in j:
    print('%4d textures' % len(j['textures']))
print()

totalbufsize = 0
for b in buffers:
    totalbufsize += b['byteLength']
print('%4d buffers    (%s bytes)' % (len(buffers), format(totalbufsize, ',d')))

totalaccsize = 0
for a in accessors:
    bvidx = a['bufferView'] if 'bufferView' in a else 0
    totalaccsize += bufferviews[bvidx]['byteLength']
print('%4d accessors  (%s bytes)' % (len(accessors), format(totalaccsize, ',d')))

if 'cameras' in j:
    print()
    print('Cameras:')
    for idx, c in enumerate(j['cameras']):        
        name = '"'+c['name']+'"' if 'name' in c else '<unnamed>'
        print('[%4d] %-12s  %-25s' % (idx, c['type'], name))

if 'images' in j:
    print()
    print('Images:')
    for idx, i in enumerate(j['images']):
        if 'uri' in i:
            print('[%4d] %s (external)' % \
            (idx, i['uri']))
            continue

        bv = bufferviews[i['bufferView']]
        length = bv['byteLength']
        
        name = '"'+i['name']+'"' if 'name' in i else '<unnamed>'
        mimetype = i['mimeType']            
        
        if show_image_properties or dump_images:
            assert bv['buffer'] == 0
            offset = bv['byteOffset']
            imgfiledata = buffer0data[offset:offset+length]            
                
        imgprops = ''
        if show_image_properties:
            f = BytesIO(imgfiledata)
            try:
                img = Image.open(f)
                r = '%dx%d' % (img.size[0], img.size[1])
                imgprops = '%11s %s' % (r, img.mode)
            except IOError as e:
                imgprops = '(error: %s)' % e
                
        print('[%4d] %12s bytes  %-12s %-40s %s' % \
            (idx, format(length,',d'), i['mimeType'], name, imgprops))
        
        if dump_images:            
            try:
                ext = {
                    'image/jpeg':   'jpg',
                    'image/png' :   'png'
                }[mimetype]
            except:
                ext = '.bin'
                
            o = open('img-%04d.%s' % (idx, ext), 'wb')
            o.write(imgfiledata)
            o.close()
            
component_sizes = {
    5120: 1, 5121: 1, 5122: 2, 5123: 2, 5125: 4, 5126: 4
}
    
component_types = {
    5120: 'BYTE', 5121: 'UNSIGNED_BYTE', 5122: 'SHORT', 5123: 'UNSIGNED_SHORT', 
    5125: 'UNSIGNED_INT', 5126: 'FLOAT'
}

array_types = {
    5120: 'b', 5121: 'B', 5122: 'h', 5123: 'H', 
    5125: 'I', 5126: 'f'
}

component_elements = {
    'SCALAR': 1, 'VEC2': 2, 'VEC3': 3, 'VEC4': 4
}

# See primitive.mode in gltf spec (https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#_mesh_primitive_mode)
primitive_mode_chars = ['P', 'L', 'LL', 'LS', 'T', 'TS', 'TF']
    
def accessor_size(accidx):
    a = accessors[accidx]
    return a['count'] * component_sizes[a['componentType']] * component_elements[a['type']]
    
def quote(s, maxlen=0):
    if maxlen > 0 and len(s)+4 > maxlen:
        return '"%s...' % s[:maxlen-4]
    else:
        return '"%s"' % s

if 'meshes' in j:
    print()
    print('Meshes:')
    for meshidx, m in enumerate(j['meshes']):
        
        total_accessor_size = 0
        
        total_vertex_count = 0
        total_normal_count = 0
        total_tangent_count = 0
        total_color0_count = 0
        total_texcoord0_count = 0
        total_texcoord1_count = 0
        total_index_count = 0
        
        all_modes = set([])
        all_extensions = set([])
        lines = []
        
        num_primitives = len(m['primitives'])
        
        for primidx, p in enumerate(m['primitives']):
                        
            # Triangles by default
            mode = p['mode'] if 'mode' in p else 4
            all_modes.add(mode)                        
            
            draco_compressed = False
            draco_data = None
            extensions = set()
            if 'extensions' in p:
                for ename, edata in p['extensions'].items():
                    if ename == 'KHR_draco_mesh_compression':
                        draco_compressed = True
                        draco_data = edata
                    extensions.add(ename)
                all_extensions.update(extensions)
                    
            if draco_compressed:
                bvidx = draco_data['bufferView']                
                total_accessor_size += bufferviews[bvidx]['byteLength']
                                   
            attrs = p['attributes']
            
            accidx = attrs['POSITION']
            vertex_count = accessors[accidx]['count']
            total_vertex_count += vertex_count
            accessor_uses[accidx] = (meshidx, primidx, 'P')
            if not draco_compressed:
                total_accessor_size += accessor_size(accidx)
                
            normal_count = 0
            tangent_count = 0
            color0_count = 0
            texcoord0_count = 0
            texcoord1_count = 0
            
            if 'NORMAL' in attrs:
                accidx = attrs['NORMAL']
                normal_count = accessors[accidx]['count']
                total_normal_count += normal_count
                accessor_uses[accidx] = (meshidx, primidx, 'N')
                if not draco_compressed:
                    total_accessor_size += accessor_size(accidx)
            if 'TANGENT' in attrs:
                accidx = attrs['TANGENT']
                tangent_count = accessors[accidx]['count']
                total_tangent_count += tangent_count
                accessor_uses[accidx] = (meshidx, primidx, 'G')
                if not draco_compressed:
                    total_accessor_size += accessor_size(accidx)
            if 'COLOR_0' in attrs:
                accidx = attrs['COLOR_0']
                color0_count = accessors[accidx]['count']
                total_color0_count += color0_count
                accessor_uses[accidx] = (meshidx, primidx, 'C0')
                if not draco_compressed:
                    total_accessor_size += accessor_size(accidx)
            if 'TEXCOORD_0' in attrs:
                accidx = attrs['TEXCOORD_0']
                texcoord0_count = accessors[accidx]['count']
                total_texcoord0_count += texcoord0_count
                accessor_uses[accidx] = (meshidx, primidx, 'T0')
                if not draco_compressed:
                    total_accessor_size += accessor_size(accidx)
            if 'TEXCOORD_1' in attrs:
                accidx = attrs['TEXCOORD_1']
                texcoord1_count = accessors[accidx]['count']
                total_texcoord1_count += texcoord1_count
                accessor_uses[accidx] = (meshidx, primidx, 'T1')
                if not draco_compressed:
                    total_accessor_size += accessor_size(accidx)
                    
            if 'indices' in p:            
                accidx = p['indices']
                index_count = accessors[accidx]['count']
                total_index_count += index_count
                accessor_uses[accidx] = (meshidx, primidx, 'I')
                if not draco_compressed:
                    total_accessor_size += accessor_size(accidx)
            else:
                index_count = 0
                
            if dump_primitive_information:

                s = '       [%2d] %s' % (primidx, primitive_mode_chars[mode])
                
                d = '%8sV %8sI' % (format(vertex_count, ',d'), format(index_count, ',d'))
                if color0_count > 0:
                    d += ' %8sC0' % format(color0_count, ',d')
                if normal_count > 0:
                    d += ' %8sN' % format(normal_count, ',d')
                if texcoord0_count > 0:
                    d += ' %8sT0' % format(texcoord0_count, ',d')
                if texcoord1_count > 0:
                    d += ' %8sT1' % format(texcoord1_count, ',d')
                    
                s += ' %s' % d
                    
                if len(extensions) > 0:
                    e = ','.join(sorted(extensions))
                    s += '  %s' % e
                                
                lines.append(s)

            
        all_modes = ','.join(map(lambda m: primitive_mode_chars[m], all_modes))
        all_modes = '[' + all_modes + ']'
        
        d = '%8sV %8sI' % (format(total_vertex_count, ',d'), format(total_index_count, ',d'))
        if total_color0_count > 0:
            d += ' %8sC0' % format(total_color0_count, ',d')
        if total_normal_count > 0:
            d += ' %8sN' % format(total_normal_count, ',d')
        if total_texcoord0_count > 0:
            d += ' %8sT0' % format(total_texcoord0_count, ',d')
        if total_texcoord1_count > 0:
            d += ' %8sT1' % format(total_texcoord1_count, ',d')
            
        e = ''
        if len(all_extensions) > 0:
            e = ','.join(sorted(all_extensions))
            
        name = '<unnamed>'
        if 'name' in m:
            name = quote(m['name'],24)
        
        if dump_primitive_information:
            
            s = '[%4d] %-24s  %12s bytes  %2dP %-5s  %s' % \
                (meshidx, name, format(total_accessor_size, ',d'), num_primitives, all_modes, d)
            print(s)
            
            # Per-primitive data
            for line in lines:
                print(line)
                
        else:        
            
            s = '[%4d] %12s bytes  %2dP %-5s  %-24s  %s  %s' % \
                (meshidx, format(total_accessor_size, ',d'), num_primitives, all_modes, name, d, e)
            print(s)

    print()
    print('(#P = number of primitives, [Lines, Line Loop, Line Strip, Points, Triangles, Triangle Strip, Triangle Fan],')
    print(' V = vertices, I = indices, N = normals, T0 = texcoord0s, T1 = textcoord1s, C0 = color0)')


if 'materials' in j:
    print()
    print('Materials:')
    for idx, m in enumerate(j['materials']):
        name = quote(m['name']) if 'name' in m else '<unnamed>'
        
        double_sided = '2S' if ('doubleSided' in m and m['doubleSided']) else ''
        
        textures = []
        if 'pbrMetallicRoughness' in m:
            #'metallic-roughness'
            mr = m['pbrMetallicRoughness']
            if 'baseColorTexture' in mr:
                textures.append('BC')
            if 'metallicRoughnessTexture' in mr:
                textures.append('MR')
            
        if 'normalTexture' in m:
            textures.append('N')
        if 'emissiveTexture' in m:
            textures.append('E')
        if 'occlusionTexture' in m:
            textures.append('O')
        
        alpha_mode = 'opaque'
        if 'alphaMode' in m:
            if m['alphaMode'] == 'MASK':
                alpha_mode = 'alpha-mask'
            elif m['alphaMode'] == 'BLEND':
                alpha_mode = 'alpha-blend'
            else:
                assert m['alphaMode'] == 'OPAQUE'  

        if len(textures) > 0:
            textures = '[%s]' % (' '.join(textures))
        else:
            textures = ''
        
        print('[%4d] %-11s  %2s  %-13s %s' % (idx, alpha_mode, double_sided, textures, name))

    print()
    print('(2S = double-sided, BC = baseColorTexture, E = emmisiveTexture, MR = metallicRoughnessTexture, N = normalTexture, O = occlusionTexture)')

print()
print('Buffers:')
for idx, b in enumerate(buffers):
    print('[%4d] %11s bytes' % (idx, format(b['byteLength'], ',d')))
    
print()
print('Buffer views:')
BV_TARGETS = {
    0x8892: 'GL_ARRAY_BUFFER',
    0x8893: 'GL_ELEMENT_ARRAY_BUFFER'
}
for idx, bv in enumerate(bufferviews):
    b = 'B%d' % bv['buffer']
    o = 'O%s' % format(bv['byteOffset'], ',d') if 'byteOffset' in bv else 'O0'
    s = ' S%s' % format(bv['byteStride'], ',d') if 'byteStride' in bv else ''
    t = ''
    if 'target' in bv:
        target = bv['target']
        if target in BV_TARGETS:
            t = ' '+BV_TARGETS[target]
        else:
            t = ' (unknown target 0x%04x)' % target
    print('[%4d] %11s bytes   %-5s %-8s%-4s%s' % (idx, format(bv['byteLength'], ',d'), b, o, s, t))
    
fmt_strings = {
    5120: '%3d', 5121: '%3d', 5122: '%5d', 5123: '%5d', 
    5125: '%10d', 5126: '%12.6f'
}

print()
print('Accessors:')
for idx, accessor in enumerate(accessors):
    
    comptype = accessor['componentType']    # 5120 (BYTE), ...
    if comptype not in component_types:
        compdesc = '??? (%d)' % comptype
    else:
        compdesc = component_types[comptype]
            
    type = accessor['type']                 # SCALAR, VEC3, ...
    count = accessor['count']    
    
    if idx in accessor_uses:
        meshidx, primidx, use = accessor_uses[idx]        
        mesh = j['meshes'][meshidx]        
        mesh_name = ' '+quote(mesh['name'],24) if 'name' in mesh else ''
        use = '(M%d%s, P%d, %s)' % (meshidx, mesh_name, primidx, use)
    else:
        use = '(unknown use)' 
    
    if 'bufferView' in accessor:
        bvidx = accessor['bufferView']
        bv = bufferviews[bvidx]
        
        bytelength = bv['byteLength']
        byteoffset = 0
        if 'byteOffset' in bv:
            byteoffset = bv['byteOffset']
    
        print('[%4d] %9sx  %-6s  %-14s  %11s bytes  %s' % \
            (idx, format(count, ',d'), type, compdesc, format(bytelength, ',d'), use))
                
    else:
        # Assume use of draco compression, show expected uncompressed size
        esize = count * component_elements[type] * component_sizes[comptype]
        print('[%4d] %8sx  %-6s  %-14s  %11s bytes* %s' % \
            (idx, format(count, ',d'), type, compdesc, format(esize, ',d'), use))
                                
    if dump_accessor_values and ('bufferView' in accessor) and (comptype in component_types):        
        
        a = array.array(array_types[comptype])
        a.frombytes(buffer0data[byteoffset:byteoffset+bytelength])
        
        nfmt = fmt_strings[comptype]
        if type == 'SCALAR':
            fmt = '  [%04d] ' + nfmt
            for idx in range(count):   
                print(fmt % (idx, a[idx]))
        elif type == 'VEC2':
            fmt = '  [%04d] ' + nfmt + ' ' + nfmt + ' '
            for idx in range(0, count):               
                print(fmt % (idx, a[2*idx], a[2*idx+1]))
        elif type == 'VEC3':
            fmt = '  [%04d] ' + nfmt + ' ' + nfmt + ' ' + nfmt + ' '
            for idx in range(0, count):               
                print(fmt % (idx, a[3*idx], a[3*idx+1], a[3*idx+2]))
        elif type == 'VEC4':
            fmt = '  [%04d] ' + nfmt + ' ' + nfmt + ' ' + nfmt + ' ' + nfmt + ' '
            for idx in range(0, count):               
                print(fmt % (idx, a[4*idx], a[4*idx+1], a[4*idx+2], a[4*idx+3]))
        else:
            raise ValueError('Unhandled accessor type "%s"' % type)
                
print()
